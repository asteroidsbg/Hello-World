
 /*
    Test is a test baner   

        It is free to use and is shared freely  
        Check on Filas;

  
*/
/*  
var ObjetoCanvas_Depurar = false; // 

// Constructor 
var Banner_Sinusoidal = function() {    
    // Llamo al constructor of ObjetctBanner
    if (ObjetoCanvas.call(this, "2d") === false) { return false; }
    // Stop ...         
    this.Reiniciar();
    // 
    this.Cargando(false);
};


Banner_S.prototype = Object.assign( Object.create(ObjetoCanvas.prototype), {
    constructor     : ipcsdemo,
    
    Avance2         : 0,
    // 
    Redeem   : function() {  this.Reiniciar();  },
    // Array of the circles
    Circle        : [],
        
    // 
    // 
    CreateCircle   : function(ArrayCircle) {
        var TotalCircles = RandInt(10, 4);        
        this.Circle = [];
        if (typeof(ArrayCircle) === "undefined") { // No hay array predefined  
            var cAlpha = 1 - (TotalCircles / 10);            
            for (var i = 0; i < TotalCircles; i++) {                
                this.Circle.push(new this.Circle(RandInt((this.Alt / TotalCircles) - 2, 15), 
                    "rgb(" + Math.floor(234 * cAlpha) + "," + Math.floor(80 * cAlpha) + "," + Math.floor(78 * cAlpha) + ")",
                    "rgb(" + Math.floor(255 * cAlpha) + "," + Math.floor(155 * cAlpha) + "," + Math.floor(155 * cAlpha) + ")"
                ));
                cAlpha += 0.1;
            }
        }
        else {
            var cAlpha = 1 - (ArrayCircle.length / 10);
            for (var i = 0; i < ArrayCircle.length; i++) {
                this.Circle.push(new this.Circle(ArrayCircles[i], 
                    "rgb(" + Math.floor(234 * cAlpha) + "," + Math.floor(80 * cAlpha) + "," + Math.floor(78 * cAlpha) + ")",
                    "rgb(" + Math.floor(255 * cAlpha) + "," + Math.floor(155 * cAlpha) + "," + Math.floor(155 * cAlpha) + ")"
                ));
                cAlpha += 0.1;
            }
        }
        // Central cisrcle
        this.Circle[0].X = this.PosXCircleCentral; // 
        this.Circle[0].Y = this.Alt / 2;
        
        this.Circle[this.Circle.length - 1].Color = "rgb(234, 80, 78)";
    },
    // Objeto of the circle
    Cirle : function(Tam, Color, ColorPunto) {
        this.Tam = Tam;
        this.X = 0;
        this.Y = 0;
        this.Color = Color;
        this.ColorPunto = ColorPunto;
        
        
        this.Forward = function(Forward, ParentCirculo) {
            this.X = ParentCircle.X + (Math.cos(Forward) * (ParentCircle.Tam));
            this.Y = ParentCircle.Y + (Math.sin(Forward) * (ParentCircle.Tam));            
        };
    },
    // Animation start function 
    Start       : function() { 
        this.DDTrabs =  this.Anch / 8;
        this.ANCHGrafic = this.Anch - (this.Alt);
        this.PosXCentralCircle = this.Anch - (this.Alt / 2);
        
        // Color of the grafic
        this.Color = "rgb(234, 80, 78)";
        this.ColorPoint = "rgb(255, 155, 155)";
        // Degrade transactions in binary 
        this.DegradeTransaction = this.Context.createLinearGradient(0, 0, this.DegradeTransaction_Anch, 0);
        this.DegradeTransaction.addColorStop(0, "rgba(49, 46, 53, 1)");
        this.DegradeTransaction.addColorStop(1, "rgba(49, 46, 53, 0)");
        
        if (Rand() > 0.5) {  this.Speed = (Math.PI * 2) / 180;     }
        else              {  this.Speed = -((Math.PI * 2) / 180);  }
        
//        this.CreateCircle([60, 40, 30, 45]);
        this.CrearCirculos();
                
        // Create a buffer
        this.ImgWave = new BufferCanvas((this.AnchoGrafico) + 360, this.Alto);
        this.ImgWave.Context.strokeStyle = this.Color;    
       
        // wavePoint
        this.ImgWave.Context.beginPath();
        this.ImgWave.Context.moveTo(0, this.ImgWave.Alt / 2);
        var Forward = 0;        
        
        for (var x = 0; x <= (this.Graffic) + 360; x++){
            Forward -= this.Speed;
            for (var i = 1; i < this.Circle.length; i++) {
                this.Circle[i].Forward(Forward * i, this.Circle[i - 1]);
            }
            this.ImgWave.Context.lineTo(x, this.Circle[this.Circle.length - 1].Y);
        }
        this.ImgWave.Context.stroke();

        this.Forward = -Math.floor(this.Grafffic);
        this.Forward2 = 0;
    },
    
    
    //Function of the animation
    Pinter          : function() {    
        this.Context.fillStyle = "rgba(49, 46, 53, 0.95)";
        this.Context.fillRect(0, 0, this.Ancho, this.Alto);
        // Pinter lines
        this.Context.setLineDash([2.5]);
        this.Context.strokeStyle = "rgb(80, 80, 80)";                
        this.Context.beginPath();
        this.Context.moveTo(5, this.Alto / 2);
        this.Context.lineTo(this.Anch - 5, this.Alto / 2);
        this.Context.stroke();
        this.Context.beginPath();
        this.Context.moveTo(this.PosXCircleCenter, 5);
        this.Context.lineTo(this.PosXCircleCenter, this.Alto - 5);
        this.Context.stroke();
        this.Context.setLineDash([1, 0]);        
        
        // Forward for the buffer
        this.Forward +=1;
        if (this.Forward >= 360) this.Forward = 0;
        this.Context.drawImage(this.ImgWave.Canvas, this.Forward, 0, this.Graffic, this.Alt, 0, 0, this.Graffico, this.Alt);

        // Forward Circles
        this.Forward2 -= this.Speed;
        this.Context.fillStyle = this.ColorPoint;        
        // Circles and points
        for (var i = 0; i < this.Circle.length; i++) {
            this.Context.strokeStyle = this.Circle[i].Color;        
            this.Context.fillStyle = this.Circulos[i].ColorPoint;        
            if (i !== 0) { // No circle moves}
                this.Circle[i].Forward(this.Forward2 * i, this.Forward[i - 1]);
                // Point of the G String
                this.Context.beginPath();
                this.Context.arc(this.Circle[i].X, this.Circle[i].Y, 2, 0, 2 * Math.PI);
                this.Context.fill();            
            
            if (i !== this.Circle.length - 1) { // Last moving position
                this.Context.beginPath();
                this.Context.arc(this.Circulos[i].X, this.Circle[i].Y, this.Circle[i].Tam, 0, 2 * Math.PI);
                this.Context.stroke();
            }
            
        }
                
        
        // Graffic Circle Bar
        this.Context.beginPath();
        this.Context.moveTo(this.Circle[i - 1].X, this.Circle[i - 1].Y);
        this.Context.lineTo(this.Graffic, this.Circle[i - 1].Y);
        this.Context.stroke();
        
        // Point of sin.
        this.Context.beginPath();
        this.Context.arc(this.Graffic, this.Circle[i - 1].Y, 2.5, 0, 2 * Math.PI);
        this.Context.fill();
        
        // Degrade point
        this.Context.fillStyle = this.DegradeTransaction;
        this.Context.fillRect(0, 0, this.DegradeTransaction_Anch, this.Alt);        
    }
});

var Canvas = null;
window.addEventListener('load', function() { Canvas = new Banner_Sin; });
